# Example test.conf Structured Properties Configuration file.
#
# A Structured Properties Configuration file (*.conf) is a simple human
# readable and human editible configuration file format with a syntax 
# that can be understood easily by anyone by just looking at the file.
#
# Because conf files only support primitive types, the syntax can be kept
# clean, and syntax errors in the configuration file can be kept to a
# minimum. If you need more complex types, those objects probably should
# belong in other serialization formats, and they probably are not required
# to be human editable.
#
# This example file consists of a simple definition of the language along
# with examples in use.
#
# COMMENT
#
#   This is a comment. Comments go until the end of line. The only way to
#   start a comment is with #, C-style comments are not supported.
#
# WHITESPACE
#
#   Whitespace is ignored by the parser, except where it is used to separate
#   values. There is no particular level of indentation required nor does
#   indentation affect the parser in any way.
#
#   Whitespace is defined as being a space ' ', a tab '\t' or a line ending
#   character '\r' & '\n'. Vertical tab '\v' and line feed '\f' are also
#   treated as whitespace, but you should avoid using them anyway.
#
# IDENTIFIER
#
#   Identifiers may be a bare word alphanumeric string that must begin with 
#   a letter, and can contain '-' and '_'.
#
#   Syntax examples:
#   
#     something-name some5thing6 something_else
#
#   Identifiers are used as keys in HashMaps.
#
# VALUE
#
#   Values are used in HASHMAPs and ARRAYLISTs. A value one of these basic:-
#
#   STRING    Any sequence of characters surrounded by double quotes. If you
#             can't fit the string cleanly on a single line, you can use the
#             continuation character '\' to continue the string onto another
#
#   NUMBER    An integer or double, without exponents. If you want something
#             more complicated, use a string and parse it yourself. I might
#             add more complicated types later, but right now this is what
#             is supported.
#
#   BLOCK     A block is designated with a '{' and ended with a '}'. If a
#             block is used as the value in a hashmap, you may omit the '='.
#
#             A block can designate the beginning of either a HASHMAP or an
#             ARRAYLIST. The type it is depends on the symbol after the open
#             brace '{'. If the next symbol is an IDENTIFIER, then the block 
#             is defined as being a HASHMAP. If it is a VALUE, then it is an 
#             ARRAYLIST.
#
#             It goes without saying that all items in a HASHMAP must be
#             IDENTIFIER = VALUE items, while all items in an ARRAYLIST must
#             be VALUES. 
#
# HASHMAP
#
#   HashMaps are used to provide a simple way to define key/value information.
#   HashMaps are converted to java.util.HashMap objects by the parser.
#
#   Syntax:
#
#     { IDENTIFIER = VALUE IDENTIFIER = VALUE IDENTIFIER = VALUE ... }
#
#   Whitespace between the '=' and the key and value is not required, but 
#   should be included for readability. Whitespace is obviously needed between
#   each key value pair. It is recommended that you use a newline however
#   for readability.
#
#   The entire configuration file has an implied { } around it, and is forced
#   to being a HashMap.
#
# ARRAYLIST
#
#   ArrayLists are used to private a way to define a list of valies. ArrayLists
#   are converted to java.util.ArrayList objects by the parser.
#
#   Syntax:
# 
#     { VALUE VALUE VALUE ... }
# 
#   As with HashMaps, the only whitespace that is required is between values.
#
# Complete example of the syntax:

some_global_setting = "Global StructuredProperties setting"

options {
    server-name         = "The Great \"POOHBAH\""   # Yes, you can escape quotes and such.
    directory           = "/var/foo"                # anything can be in a string, basically.
    daemonise           = 1                         # boolean true/false isn't recognised yet.
    listen-ip           = "0.0.0.0"                 # do we need a type for IP addresses?
    integer             = 6667
    negative-integer    = -1000
    double              = 2.2300000012
    negative-double     = -192391231.203881483
    
    # Comments can't go after a continuation character, though spurious whitespace is ok.
    
    multiline-string    = "This is a string "                 \            
                          "That is split on multiple lines. " \           
                          "And that's just fine."
}

# users is a hashmap with 2 entries, "matjam" and "chrome".

users {
    # matjam is another hashmap with 4 entries.
    matjam {        
        name        = "Matjam"
        email       = "fred@stupendous.net"
        password    = "pass123"
        groups      { "admin"                   # arrays are just values separated by whitespace.
                      "op"
                      "user" }                  # You can put arrays on separate lines
    }
    chrome {
        name        = "Nathan"
        email       = "chrome@stupendous.net"
        password    = "qwerty"
        groups      { "admin" "op" "user" }     # Or you can put orray entries all on the same line.
    }
}

# You can put hashmaps on a single line, too.

single_line_hashmap { key = "Value" key2 = "value" key3 = "value" } 

# Here is an array of numbers

array {
    1
    2
    3
    4
}

# If you want a multidimensional array, then try something like this:

twodimensional_array {
    { "ID"      "Name"      "Description"                   }
    { 1         "peter"     "friend of a friend"            }
    { 5         "paul"      "Some guy I used to know"       }
    { 10293     "zaphod"    "He's just this guy, you know?" }
}

# Now, isn't that nicer than trying to edit XML, YAML or JSON based configuration?
# Do you need more complex data types? I think not, as you can represent anything
# using the basic types that are already supported and convert it.

