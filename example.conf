# Example test.conf Structured Properties Configuration file.
#
# This is a comment. Comments go until the end of line. The only way to
# comment is with #, C-style comments are not supported.
#
# The root of the file is a hashmap, so you need to use key = value here.
#
# HashMaps are formatted as
#
#   KEY = VALUE
#
# Separated by whitespace. Whitespace includes newlines, spaces and tab
# characters.
#
# Values supported are 
#
#   STRINGS - Any sequence of characters surrounded by double quotes. If you
#             can't fit the string cleanly on a single line, you can use the
#             continuation character '\' to continue the string onto another
#

some_global_setting = "Global StructuredProperties setting"

options {
    server-name         = "The Great \"POOHBAH\""   # Yes, you can escape quotes and such.
    directory           = "/var/foo"                # anything can be in a string, basically.
    daemonise           = 1                         # boolean true/false isn't recognised yet.
    listen-ip           = "0.0.0.0"                 # do we need a type for IP addresses?
    integer             = 6667
    negative-integer    = -1000
    double              = 2.2300000012
    negative-double     = -192391231.203881483
    
    # Comments can't go after a continuation character, though spurious whitespace is ok.
    
    multiline-string    = "This is a string "                 \            
                          "That is split on multiple lines. " \           
                          "And that's just fine."

    "string key"        = "Another string"          # Any valid value can be a key, if required.
}

# users is a hashmap with 2 entries, "matjam" and "chrome".

users {
    # matjam is another hashmap with 4 entries.
    matjam {        
        name        = "Matjam"
        email       = "fred@stupendous.net"
        password    = "pass123"
        groups      { "admin"                   # arrays are just values separated by whitespace.
                      "op"
                      "user" }                  # You can put arrays on separate lines
    }
    chrome {
        name        = "Nathan"
        email       = "chrome@stupendous.net"
        password    = "qwerty"
        groups      { "admin" "op" "user" }     # Or you can put orray entries all on the same line.
    }
}

# You can put hashmaps on a single line, too.

single_line_hashmap { key = "Value" key2 = "value" key3 = "value" } 

# Here is an array of numbers

array {
    1
    2
    3
    4
}

# If you want a multidimensional array, then try something like this:

twodimensional_array {
    { "ID"      "Name"      "Description"                   }
    { 1         "peter"     "friend of a friend"            }
    { 5         "paul"      "Some guy I used to know"       }
    { 10293     "zaphod"    "He's just this guy, you know?" }
}

# Now, isn't that nicer than trying to edit XML, YAML or JSON based configuration?
# Do you need more complex data types? I think not, as you can represent anything
# using the basic types that are already supported and convert it.

