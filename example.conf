# Example test.conf Structured Properties Configuration file.
#
# A Structured Properties Configuration file (*.conf) is a simple human
# readable and human editible configuration file format with a syntax 
# that can be understood easily by anyone by just looking at the file.
#
# Because conf files only support primitive types, the syntax can be kept
# clean, and syntax errors in the configuration file can be kept to a
# minimum. If you need more complex types, those objects probably should
# belong in other serialization formats, and they probably are not required
# to be human editable.
#
# This example file contains a detailed explanation of the syntax of this
# file, but the structure and usage of a Structured Properties file
# is intended to be natural and easy to pick up without reading
# documentation.
#
# COMMENT
#
#   This is a comment. The only way to start a comment is with #, C-style 
#   comments are not supported.
#
#   Comments may be anywhere you like and are ignored until end of line.
#
# WHITESPACE
#
#   Whitespace is unimportant to the lexer and parser.
#
#   There is no particular level of indentation required nor does indentation
#   affect the parser in any way.
#
#   The only explicit exception to this is when you use unquoted strings,
#   explained below.
#
#   Whitespace is defined as being a space ' ', a tab '\t' or a line ending
#   character '\r' & '\n'. Vertical tab '\v' and line feed '\f' are also
#   treated as whitespace, but you should avoid using them anyway.
#
# CHARACTER SET
#
#   Structured Property Configuration files are UTF-8. UTF-8 is the only
#   supported character set.
#
# KEY STRINGS
#
#   Key strings are used as unquoted string keys in HASHMAPS.
#
#   Key strings may be a bare word alphanumeric string that must begin with 
#   a letter, and can contain '-' and '_'.
#
#   Syntax examples:
#   
#     something-name some5thing6 something_else
#
#   You can also use a QUOTED STRING as a key, in which case all characters
#   are valid. Be aware that using a QUOTED STRING with a '.' will cause the
#   convenience method getProperty(String) to fail; you will need to use
#   getProperty(...) and specify each component explicitly.
#
# UNQUOTED STRING
#
#   Unquoted strings start from the first valid non whitespace character and
#   end at the last. Unquoted strings may be continued onto the next line
#   using a backslash (\) character, in the same way as Property files.
#   Whitespace before the backslash is preserved, so that you can concatenate
#   multiple strings easily.
#
#   When an unquoted string is continued, the whitespace leading up to the
#   first non whitespace character on the new line is ignored, at which pint
#   the string is then continued.
#
#   Tab (\t) and newline (\r and \n) escape characters are supported.
#   The closed brace '}' is unsupported as a part of an unquoted string. If 
#   you need a closed brace, use a quoted string.
# 
#   EXAMPLE
#
#      some_key = This is an unquoted string. \
#                 This part of the string continues on.
#   
# QUOTED STRINGS
#
#   Quoted strings are started with a doublequote (") and ended with a
#   doublequote. There is no way to continue a quoted string; either use an
#   unquoted string, or let the line run on.
#
#   Tab (\t) and newline (\r and \n) escape characters are supported.
#
#   Quoted strings may be used in HASHMAPs and ARRAYLISTs as both keys and
#   values.
#
#   EXAMPLE
# 
#      "This is a quoted string"
#
# BLOCKS
#
#   A block is designated with a '{' and ended with a '}'. If a block is used
#   as the value in a HASHMAP, you may omit the '='.
#
#   A block can designate the beginning of either a HASHMAP or an ARRAYLIST. 
#   The type it is depends on the symbols after the open brace '{'. If the
#   two symbols are "STRING =", then it's a HASHMAP.
#
#   A "STRING STRING ..." would designate an ARRAYLIST, where as a single
#   STRING would also designate an ARRAYLIST.
#
#   It goes without saying that all items in a HASHMAP must be STRING = 
#   VALUE items, while all items in an ARRAYLIST must just be STRINGs.
#
# HASHMAP
#
#   HashMaps are used to provide a simple way to define key/value information.
#   HashMaps are converted to java.util.HashMap objects by the parser.
#
#   Syntax:
#
#     { KEY = VALUE
#       KEY = VALUE 
#       KEY = VALUE 
#       ... }
#
#   Whitespace between the '=' and the key and value is not required, but 
#   should be included for readability. If you use quoted strings for the
#   values, then you only need whitespace between each entry.
#
#   If you want to use unquoted strings, as they go until the end of line, you
#   will need each key/value pair on a new line.
#
#   The entire configuration file has an implied { } around it, and is forced
#   to being a HashMap. Therefore, all entries in the root of the file is
#   required to be a KEY = VALUE entry.
#
# ARRAYLIST
#
#   ArrayLists are used to provide a way to define a list of values. ArrayLists
#   are converted to java.util.ArrayList objects by the parser.
#
#   Syntax:
# 
#     { VALUE 
#       VALUE 
#       VALUE 
#       ... }
# 
#   As with HashMaps, using unquoted strings will require newlines between
#   entries, while using quoted strings do not.
#
# Complete example of the syntax:

some_global_setting = Global StructuredProperties setting

options {
    server-name         = The Great "POOHBAH"
    directory           = /var/foo                # Lets see if this comment exists.
    daemonise           = 1                         
    listen-ip           = 0.0.0.0                 
    integer             = 6667
    negative-integer    = -1000
    double              = 2.2300000012
    negative-double     = -192391231.203881483
    
    # Comments can't go after a continuation character, though spurious whitespace is ok.
    
    multiline-string    = This is a string \            
                          that is split on multiple lines. \   # Do comments work here?
                          And that's just fine.
                          
    quoted-string       = "This string is quoted as it has a \tspecial\t character in it."
    
    "quoted key"        = Something else
    "quoted key 2"      = "A quoted value."
    
    "a hashmap example" = { key1 = An unquoted string
                            key2 = Another unquoted string }
}

# users is a hashmap with 2 entries, "matjam" and "chrome".

users {
    # matjam is another hashmap with 4 entries.
    matjam {        
        name        = Matjam
        email       = fred@stupendous.net
        password    = pass123
        groups      { admin                 # If you don't want to use quoted strings, the array
                      op                    # entries need to be on a different line
                      user }
    }
    chrome {
        name        = Nathan
        email       = chrome@stupendous.net
        password    = qwerty
        groups      { "admin" "op" "user" }  # With quotes, you can put them on the same line.
    }
}

# If you want a multidimensional array, then try something like this:

twodimensional_array {
    { "ID"      "Name"      "Description"                   }
    { "1"       "peter"     "friend of a friend"            }
    { "5"       "paul"      "Some guy I used to know"       }
    { "10293"   "zaphod"    "He's just this guy, you know?" }
}

# Because the array entries are all on the same line, you need to use quotes
# around the strings.
#
# Now, isn't that nicer than trying to edit XML, YAML or JSON based configuration?
# Do you need more complex data types? I think not, as you can represent anything
# using the basic types that are already supported and convert it.

